         // This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

         export const commands = {
async init() : Promise<null> {
return await TAURI_INVOKE("plugin:tauri-specta|init");
},
async dispatchMessage(message: Message) : Promise<null> {
return await TAURI_INVOKE("plugin:tauri-specta|dispatch_message", { message });
}
}

export const events = __makeEvents__<{
frontendEvent: FrontendEvent
}>({
frontendEvent: "plugin:tauri-specta:frontend-event"
})

/** user-defined types **/

export type Colour = { hue: number; saturation: number; luminance: number }
export type DialogMessage = { SelectDetectorDialog: SelectDetectorDialogMessage }
export type FrontendEvent = FrontendMessage
export type FrontendMessage = { DisplayDialog: { title: string } } | { SetActiveTool: ToolType } | "TriggerViewportResize"
export type LineOptionsUpdate = never
export type LineToolMessage = "Abort" | "WorkingColourChanged" | "DragStart" | "DragStop" | { UpdateOptions: LineOptionsUpdate }
export type Message = "NoOp" | "Init" | { Dialog: DialogMessage } | { Frontend: FrontendMessage } | { Tool: ToolMessage }
export type RectangleOptionsUpdate = { LineWeight: number } | { StrokeColour: Colour | null } | { WorkingColour: [Colour | null, Colour | null] }
export type RectangleToolMessage = "Overlays" | "Abort" | "WorkingColourChanged" | "DragStart" | "DragStop" | { UpdateOptions: RectangleOptionsUpdate }
export type SelectDetectorDialogMessage = { Detector: string } | "Submit"
export type SelectToolMessage = "Abort" | "DragStart" | "DragStop"
export type ToolMessage = { Select: SelectToolMessage } | { Line: LineToolMessage } | { Rectangle: RectangleToolMessage } | "Ellipse" | { ActivateTool: { tool_type: ToolType } } | "InitTools"
export type ToolType = "Select" | "Line" | "Rectangle" | "Ellipse"

/** tauri-specta globals **/

         import { invoke as TAURI_INVOKE } from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type Window as __WebviewWindowHandle__ } from "@tauri-apps/api/window";

type __EventObj__<T> = {
  listen: (
    cb: TAURI_API_EVENT.EventCallback<T>
  ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
  once: (
    cb: TAURI_API_EVENT.EventCallback<T>
  ) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
  emit: T extends null
    ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
    : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

type __Result__<T, E> =
  | { status: "ok"; data: T }
  | { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
  mappings: Record<keyof T, string>
) {
  return new Proxy(
    {} as unknown as {
      [K in keyof T]: __EventObj__<T[K]> & {
        (handle: __WebviewWindowHandle__): __EventObj__<T[K]>;
      };
    },
    {
      get: (_, event) => {
        const name = mappings[event as keyof T];

        return new Proxy((() => {}) as any, {
          apply: (_, __, [window]: [__WebviewWindowHandle__]) => ({
            listen: (arg: any) => window.listen(name, arg),
            once: (arg: any) => window.once(name, arg),
            emit: (arg: any) => window.emit(name, arg),
          }),
          get: (_, command: keyof __EventObj__<any>) => {
            switch (command) {
              case "listen":
                return (arg: any) => TAURI_API_EVENT.listen(name, arg);
              case "once":
                return (arg: any) => TAURI_API_EVENT.once(name, arg);
              case "emit":
                return (arg: any) => TAURI_API_EVENT.emit(name, arg);
            }
          },
        });
      },
    }
  );
}

     